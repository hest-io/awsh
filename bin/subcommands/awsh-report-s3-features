#!/usr/bin/env python3
"""
Simple utility to get insight on S3 features turned on at bucket level. 

Usage:
        awsh-report-s3-features [options]
        awsh-report-s3-features (-h | --help)

Options:
        -h, --help                         Show this help message and exit
        --debug                            Show more verbose logging
"""


import boto3
import botocore.exceptions
import pandas as pd
from tabulate import tabulate
import sys
import docopt
import logging
from awshutils.logger import AWSHLog
from awshutils.config import get_config_from_file
from awshutils import check_imports, clean_up


check_imports()

# Logging setup
_log = AWSHLog(__file__)
_log.setLevel(logging.ERROR)
logging.captureWarnings(True)


def check_features():
   try:
      s3_client = boto3.client('s3')
      response = s3_client.list_buckets()
   
   except botocore.exceptions.NoCredentialsError:
      _log.error("This command requires an active AWS session. Login first please!")
      sys.exit(1)

   data = []

   for bucket in response['Buckets']:
       bucket_name = bucket['Name']
       response_versioning = s3_client.get_bucket_versioning(Bucket=bucket_name)
       bucket_versioning_status = response_versioning.get('Status')
       try:
          response_lifecycle = s3_client.get_bucket_lifecycle_configuration(Bucket=bucket_name)
          intelligent_tiering_enabled = False

          if 'Rules' in response_lifecycle:
             for rule in response_lifecycle['Rules']:
                if 'Transitions' in rule:
                   for transition in rule['Transitions']:
                      if 'StorageClass' in transition and 'INTELLIGENT_TIERING' in transition['StorageClass']:
                         intelligent_tiering_enabled = True
                         break
          s3_data = {
             "Name": bucket_name,
             "Intelligent Tiering": 'On' if intelligent_tiering_enabled else 'Off',
             "Versioning": bucket_versioning_status
          }
          data.append(s3_data)

       except botocore.exceptions.ClientError as e:
          if e.response['Error']['Code'] == 'NoSuchLifecycleConfiguration':
             s3_data = {
                "Name": bucket_name,
                "Intelligent Tiering": "Off",
                "Versioning": bucket_versioning_status
               }
             data.append(s3_data)
          else:
             _log.warn(f"Error accessing bucket {bucket_name}: {str(e)}")

   return data


# Main function to handle options provided by the user
def main(options):
   if options["--debug"]:
      import logging
      _log.setLevel(logging.DEBUG)
    
   for key, value in options.items():
      _log.debug("Command-line options: {}: {}".format(key, value))
    
   try:
      df = pd.DataFrame(check_features()).fillna('Disabled')
      print(tabulate(df, headers=list(df.columns), tablefmt="tsv"))

   except AssertionError as e:
      _log.warn(e)
      clean_up(-1)

##############################################################################
# Main Script/Loop
##############################################################################

if __name__ == "__main__":
   try:
      options = docopt.docopt(__doc__)
      main(options)
    
   except docopt.DocoptExit:
      sys.exit(__doc__)