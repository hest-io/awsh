#!/usr/bin/env python3

"""
Simple utility script that reads JSON from STDIN and attempts to convert the
content to a table, before output in a given format. Very useful for the walls
of text that adding "--output=json" to AWS cli commands generates

Usage:
    json2table [options]
    json2table ( -h | --help )

Options:
    -f <format>, --format=<format>
                        Supported values are; plain, simple, grid, pipe,
                        orgtbl, rst, mediawiki, latex [default: simple]
    -s, --sort=<sort>   A CSV string specifying the columns from the data to
                        use in sorting the results. [default: ]
    -n, --numbered      Number the rows [default: False]
    -h, --help          Show this help message and exit
    --debug             Show more verbose logging

"""

from future.utils import iteritems

import os
import sys
import json
from xml.dom.minidom import parseString
import awshutils
from awshutils.logger import AWSHLog
from awshutils.config import get_config_from_file
from awshutils import check_imports, clean_up
import docopt
from tabulate import tabulate, TableFormat, _table_formats, DataRow
from operator import itemgetter, attrgetter
from collections import OrderedDict
from pprint import pprint as pp
from functools import cmp_to_key
import pandas as pd

###############################################################################
# CONFIG - Begin
###############################################################################

###############################################################################
# CONFIG - End (Do Not Edit Below)
###############################################################################

_log = AWSHLog(__file__)
check_imports()

csv = {
    "csv": TableFormat(
        lineabove=None,
        linebelowheader=None,
        linebetweenrows=None,
        linebelow=None,
        headerrow=DataRow("", ",", ""),
        datarow=DataRow("", ",", ""),
        padding=0,
        with_header_hide=["lineabove"],
    )}

_table_formats.update(csv)


###############################################################################
# Functions
###############################################################################


def main(options):
    """
    The main program function
    """

    if options['--debug'] is True:
        import logging
        _log.setLevel(logging.DEBUG)

    for key, value in options.items():
        _log.debug('command-line options: {}: {}'.format(key, value))

    try:

        # Read content from STDIN
        df = pd.read_json(sys.stdin, convert_axes=False, convert_dates=False, dtype=str)

        # Check if we have any data
        if len(df) < 1:
            _log.error('No data found to process. Did the query generate any data?')
            clean_up(-1)

        # Attempt to sort the data using provided sort keys with fallback to
        # actual key order in data provided
        sort_keys = []
        if options['--sort']:
            _log.debug('Using custom sort keys: {}'.format(options['--sort']))
            sort_keys = options['--sort'].strip().split(',')
            df = df.sort_values(by=sort_keys)

        print(tabulate(df, headers='keys', tablefmt=options['--format'], showindex=options['--numbered']))

    except TypeError as e:
        _log.error('Content does not appear to be valid JSON: {}'.format(e))
        clean_up(-1)

    except KeyError as e:
        _log.error('Sort key provided does not exist in JSON: {}'.format(e))
        clean_up(-1)

    except AssertionError as e:
        _log.warn(e)
        clean_up(-1)

    clean_up()


if __name__ == "__main__":

    try:
        options = docopt.docopt(__doc__)
        main(options)

    # Handle invalid options
    except docopt.DocoptExit as e:
        print(e.message)

